#import library numpy
import numpy as np
#import library numpy
import math 

#class of Goods 
class Goods:
  #constructor of Goods
    constructor (name:name of good, no_of_boxes:total no of boxes for a good, quantity_per_box: quantity of goods in one box):
    #assigning name
    self.name = name
    #assiging no_of_boxes
    self.no_of_boxes = no_of_boxes
    #assiging quantities of goods per box
    self.quantity_per_box = quantity_per_box
  end constructor

#class of Node 
class Node:
  #constructor of Node
  constructor (name: name of node, x_coordinate: x coordinate of node , y_coordinate:y coordinate of node):
    #assigning name to node
    self.name = name
    #assigning x coordinate of node
    self.x_coordinate = x_coordinate 
    #assigning y coordinate of node
    self.y_coordinate = y_coordinate
  end constructor 

#class of Graph
class Graph:
  #constructor of Goods
  constructor (no_of_nodes: total no of nodes on a graph):
    # create 2d matrix with rows and columns qual to no of nodes + 1
    self.nodes_matrix = np.empty( [no_of_nodes+1, no_of_nodes+1] , dtype=object )
  end constructor
  
  #procedure of computing distance between two nodes using distance formula between two coordinates 
  procedure compute_distance(self,node1: Type Node , node2:Type Node):
    #subtract x2-x1
    x = node2.x_coordinate - node1.x_coordinate
    #x square
    x = x*x
    #subtract y2-y1
    y = node2.y_coordinate - node1.y_coordinate
    #y square 
    y = y*y
    #return distance between two nodes 
    end precedure return  math.sqrt(x+y)

#create class Van
class Van:
  constructor (self,delivery_id:van id,no_of_deliveries:no of_delieveries for a van,goods:list of goods in van,color:color of van,route:shorest path route computed through dijikistra):
    self.delivery_id = delivery_id
    self.no_of_deliveries = no_of_deliveries
    self.goods = goods
    self.color = color
    self.route = route
  end constructor

#takes list of nodes as argument
procedure create_graph(nodes_list: List of Nodes):
  #initializing graph object 
  graph = Graph(len(nodes_list))
  #giving titles to matrix rows and columns like node1,node2 
  #assigning "-" [0][0]
  graph.nodes_matrix[0][0] = "-"
  for loop until range 0-length of nodes list + 1
  for i in range(1,len(nodes_list)+1):
    #assigning names to first row like node1,node2,node3
    graph.nodes_matrix[0][i] = "node"+str(i)
    #assigning names to first columns like node1,node2,node3
    graph.nodes_matrix[i][0] = "node"+str(i)
  end for 
  #computing distances bwtween every two nodes and assiging those distances in matrix 
  #assigning distances to matrix
  #for loop that computes distance of a node with respective to every other node 
  for i in range(0,len(nodes_list)):
    node1 = nodes_list[i]
    for j in range(0,len(nodes_list)):
      node2 = nodes_list[j]
      #calling method od computing distance
      distance = graph.compute_distance(node2,node1)
      #formatting distance upto 2 decimals 
      str_distance = str("{:.2f}".format(distance))
      #set distance in matrix for each node
      graph.nodes_matrix[i+1][j+1] = str_distance
  end for 
 end procedure return graph

#Djikistra method that takes list of nodes and graph as argument
procedure Djikistra(nodes,graph):
  #initializing visited nodes array 
  visited_nodes = []
  #initializing nodes names array 
  visited_nodes_names = []
  #starting node with coordinates (0,0)
  s = graph.nodes_matrix[1][1]
  #add node with (0,0 coordinates in visited nodes list)
  visited_nodes.append(nodes[0])
  #add name of node with (0,0) coordinates in visited_nodes_names list
  visited_nodes_names.append("node1")
  #visit row by row in a matrix to compute shortest path between nodes
  #start from first row 
  row = 1
  #start from first column 
  col_count = 1
  for loop through all rows
  for r in range(0,len(nodes)-1):
    #assigning shortest distance with largest value 
    shortest_distance = 1000000
    for loop through all columns 
    for col in range(1,len(nodes)+1):
      if column and rows are equal ignore that distance it will be zero 
      if(row==col):
        # no change in shortest_distance 
        shortest_distance = shortest_distance + 0
      end if 
      else if coloumns and rows are not equal 
      else:
        if the node is already in visited array do not visit that again 
        if(graph.nodes_matrix[0][col] in visited_nodes_names):
          # no change in shortest distance 
          shortest_distance = shortest_distance + 0
        end if
        #else if a node not in visited array check for most shortest distance node from current node 
        else:
          #if check shortest distance node from current node 
          if(shortest_distance>float(graph.nodes_matrix[row][col])):
            shortest_distance = float(graph.nodes_matrix[row][col]
            col_count = col
          end if
          else:
            continue
        #end else 
          end else 
      end else 
    end for loop
    #append the node with shortest distance in visited nodes list 
    visited_nodes.append(nodes[col_count-1])
    #append the name of node with shortest distance in visited nodes names list 
    visited_nodes_names.append(nodes[col_count-1].name)
    # move to next row and check nodes again with shorest distance
    row = col_count
  end for loop 
  end procedure return visited_nodes

#method of writing output in text file
procedure output(van):
  #opening file in writing mode 
  f = open(f"van{van.delivery_id}.txt", "w")
  #Hard coded strings writing in text files
  f.write(f"Delivery {van.color} nodes \n")
  f.write(f"Delivery Id {van.delivery_id} \n")
  f.write(f"No of Deliveries:{van.no_of_deliveries}\n")
  f.write(f"*Delivery number {van.delivery_id} co-ordinates are*\n")
  f.write(f"                          Delivery Co-ordinates\n")
  f.write(f"Delivery number(node)     X               Y               \n")
  #for loop writing all nodes with x and y coordinates 
  for i in range(1,len(van.route)):
    f.write(f"{i}                         {van.route[i].x_coordinate}               {van.route[i].y_coordinate}               \n")
  end for
  #writing to python 
  f.write("\n")
  f.write(f"Boxes on van:{van.no_of_deliveries} (1 Box per delivery)")
  f.write(f"Each box has 2 meals inside")
  f.write("\n")
  f.write(f"Goods on Van     Delivery ID     Boxes on Van     Product QTY\n")
  total_boxes = 0
  total_products = 0
  #for loop writing all goods list in text file
  for i in range(len(van.goods)):
    f.write(f"{van.goods[i].name}       {van.delivery_id}                    {van.goods[i].no_of_boxes}                 {van.goods[i].quantity_per_box}\n")
    #computing total no of bexes in goods list
    total_boxes = total_boxes + van.goods[i].no_of_boxes
    #computing total no of Products in all boxes
    total_products =  total_products + van.goods[i].no_of_boxes*2
  end for loop 
  f.write(f"                  Total                {total_boxes}                {total_products}\n")
  f.close()

procedure main():
    #initializing goods list for van 1
    goods_list = []
    #Creating Goods objects and appending in goods_list
    goods_list.insert(0,Goods("Protein Meal",5,2))
    goods_list.insert(1,Goods("Weight Meal",5,2))
    goods_list.insert(2,Goods("Health Meal",3,2))
    
    #create nodes list and add those to graph for van 1
    nodes_list = []
    nodes_list.insert(0,(Node("node1" , 0 , 0)))
    nodes_list.insert(1,(Node("node2" , 0 , 4)))
    nodes_list.insert(2,(Node("node3" , 1 , 1)))
    nodes_list.insert(3,(Node("node4" , 2 , 0)))
    nodes_list.insert(4,(Node("node5" , 4 , 4)))
    nodes_list.insert(5,(Node("node6" , 7 , 3)))
    nodes_list.insert(6,(Node("node7" , -3 , 2)))
    nodes_list.insert(7,(Node("node8" , -4 , 6)))
    nodes_list.insert(8,(Node("node9" , -3 , -1)))
    nodes_list.insert(9,(Node("node10" , -5 , -1)))
    nodes_list.insert(10,(Node("node11" , -2 , -3)))
    nodes_list.insert(11,(Node("node12" , 0 , -5)))
    nodes_list.insert(12,(Node("node13" , 2 , -3)))
    nodes_list.insert(13,(Node("node14" , 4 , -2)))

    #creat graph with all nodes
    #creating first graph
    graph1 = create_graph(nodes_list)
    #computing shorest distance path using Dijisktra algo
    route = Djikistra(nodes_list,graph1)
    #creating van object with shortest path route 
    no_of_deliveries = 0
    #for loop for no of deliveries for van 1
    for i in range(0,len(goods_list)):
      no_of_deliveries = no_of_deliveries + goods_list[i].no_of_boxes
    van1 = Van(1,no_of_deliveries,goods_list,"Green",route)
    end for 
    #calling output method and save output to text file
    output(van1)

    #now for second orange van
    #initializing goods list for van 2
    goods_list2 = []
    goods_list2.insert(0,Goods("Protein Meal",4,2))
    goods_list2.insert(1,Goods("Weight Meal",4,2))
    goods_list2.insert(2,Goods("Health Meal",3,2))

    #create nodes list and add those to graph for van 2
    nodes_list2 = []
    nodes_list2.insert(0,(Node("node1" , 0 , 0)))
    nodes_list2.insert(1,(Node("node2" , 3 , 1)))
    nodes_list2.insert(2,(Node("node3" , 6 , 2)))
    nodes_list2.insert(3,(Node("node4" , 6 , 6)))
    nodes_list2.insert(4,(Node("node5" , 2 , 6)))
    nodes_list2.insert(5,(Node("node6" , -2 , 0)))
    nodes_list2.insert(6,(Node("node7" , -5 , 1)))
    nodes_list2.insert(7,(Node("node8" , -5 , 4)))
    nodes_list2.insert(8,(Node("node9" , 0 , -2)))
    nodes_list2.insert(9,(Node("node10" , -3 , -5)))
    nodes_list2.insert(10,(Node("node11" , 2 , -2)))
    nodes_list2.insert(11,(Node("node12" , 6 , -4)))
    #creat graph for nodes 
    graph2 = create_graph(nodes_list2)
    #computing shorest distance path using Dijisktra algo
    route = Djikistra(nodes_list2,graph2)
    #creating van object with shortest path route using Dijisktra
    no_of_deliveries = 0
    #for loop for no of deliveries for van 2
    for i in range(0,len(goods_list2)):
      no_of_deliveries = no_of_deliveries + goods_list2[i].no_of_boxes
    end for
    #create object for van 2
    van2 = Van(2,no_of_deliveries,goods_list2,"Orange",route)
    #save output to text file
    output(van2)
end procedure
#calling main method 
if __name__ == "__main__":
    main()